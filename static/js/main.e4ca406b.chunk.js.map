{"version":3,"sources":["Cell.jsx","Board.jsx","App.js","index.js"],"names":["Cell","props","handleClick","bind","this","flipCellsAroundMe","id","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","y","nRows","newCol","Array","from","length","nCols","x","Math","random","chanceLightStartsOn","push","renderedBoard","currentCellBool","uuidv4","coord","split","map","Number","flipCells","setState","renderBoard","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAkCeA,E,kDAjBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,+CAKnB,WAEEC,KAAKH,MAAMI,kBAAkBD,KAAKH,MAAMK,M,oBAG1C,WACE,IAAIC,EAAU,QAAUH,KAAKH,MAAMO,MAAQ,YAAc,IAEzD,OAAO,oBAAIC,UAAWF,EAASG,QAASN,KAAKF,kB,GAd9BS,aCebC,G,wDAMJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CAAEC,QAAQ,EAAOC,MAAO,EAAKC,eAC1C,EAAKC,gBAAkB,EAAKA,gBAAgBd,KAArB,gBAHN,E,+CAOnB,WAGE,IAFA,IAAMY,EAAQ,GAELG,EAAI,EAAGA,EAAId,KAAKH,MAAMkB,MAAOD,IAAK,CAGzC,IADA,IAAME,EAASC,MAAMC,KAAK,CAAEC,OAAQnB,KAAKH,MAAMuB,QACtCC,EAAI,EAAGA,EAAIL,EAAOG,OAAQE,IAE7BC,KAAKC,SAAWvB,KAAKH,MAAM2B,oBAC7BR,EAAOK,IAAK,EAEZL,EAAOK,IAAK,EAGhBV,EAAMc,KAAKT,GAEb,OAAOL,I,yBAGT,WAGE,IADA,IAAMe,EAAgB,GACbZ,EAAI,EAAGA,EAAId,KAAKH,MAAMkB,MAAOD,IAAK,CAEzC,IADA,IAAME,EAASC,MAAMC,KAAK,CAAEC,OAAQnB,KAAKH,MAAMuB,QACtCC,EAAI,EAAGA,EAAIL,EAAOG,OAAQE,IAAK,CAEtC,IAAMM,EAAkB3B,KAAKS,MAAME,MAAMG,GAAGO,GAC5CL,EAAOK,GACL,cAAC,EAAD,CACEjB,MAAOuB,EACP1B,kBAAmBD,KAAKa,gBACxBX,GAAE,UAAKY,EAAL,YAAUO,IACPO,eAIXF,EAAcD,KAAK,6BAAoBT,GAAXY,gBAE9B,OAAOF,I,6BAKT,SAAgBG,GACd,MAAuB7B,KAAKH,MAAtBuB,EAAN,EAAMA,MAAOL,EAAb,EAAaA,MACTJ,EAAQX,KAAKS,MAAME,MACvB,EAAakB,EAAMC,MAAM,KAAKC,IAAIC,QAAlC,mBAAKlB,EAAL,KAAQO,EAAR,KAGA,SAASY,EAAUnB,EAAGO,GAEhBA,GAAK,GAAKA,EAAID,GAASN,GAAK,GAAKA,EAAIC,IACvCJ,EAAMG,GAAGO,IAAMV,EAAMG,GAAGO,IAI5BY,EAAUnB,EAAI,EAAGO,GACjBY,EAAUnB,EAAGO,EAAI,GACjBY,EAAUnB,EAAGO,GACbY,EAAUnB,EAAGO,EAAI,GACjBY,EAAUnB,EAAI,EAAGO,GAEjBrB,KAAKkC,SAAS,CAAEvB,MAAOA,IAGvB,IAAK,IAAIG,EAAI,EAAGA,EAAIC,EAAOD,IACzB,IAAK,IAAIO,EAAI,EAAGA,EAAID,EAAOC,IAEzB,GAAIV,EAAMG,GAAGO,GACX,OAINrB,KAAKkC,SAAS,CAAExB,QAAQ,M,oBAI1B,WACE,IAAMgB,EAAgB1B,KAAKmC,cAG3B,OAAOnC,KAAKS,MAAMC,OAChB,oBAAIL,UAAU,cAAd,4BAEA,qCACE,+BACE,sBAAMA,UAAU,cAAhB,oBACA,uBACA,sBAAMA,UAAU,YAAhB,oBAEF,qBAAKH,GAAG,uBAAR,SACE,gCACE,gCAAQwB,e,GAzGAnB,cAAdC,EACG4B,aAAe,CACpBrB,MAAO,EACPK,MAAO,EACPI,oBAAqB,KA+GVhB,QC5IT6B,G,kKACJ,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUE,cAUH8B,ICXfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4ca406b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.id);\n  }\n\n  render() {\n    let classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nRows: 5,\n    nCols: 5,\n    chanceLightStartsOn: 0.15,\n  };\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard() };\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    const board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nRows; y++) {\n      //generate a row based off nCols\n      const newCol = Array.from({ length: this.props.nCols });\n      for (let x = 0; x < newCol.length; x++) {\n        //make it percentage chance for elements to be true vs false\n        if (Math.random() < this.props.chanceLightStartsOn) {\n          newCol[x] = true;\n        } else {\n          newCol[x] = false;\n        }\n      }\n      board.push(newCol);\n    }\n    return board;\n  }\n\n  renderBoard() {\n    //use state board in order to render Cells with info we need\n    const renderedBoard = [];\n    for (let y = 0; y < this.props.nRows; y++) {\n      const newCol = Array.from({ length: this.props.nCols });\n      for (let x = 0; x < newCol.length; x++) {\n        //get the current boolean from state at given position\n        const currentCellBool = this.state.board[y][x];\n        newCol[x] = (\n          <Cell\n            isLit={currentCellBool}\n            flipCellsAroundMe={this.flipCellsAround}\n            id={`${y}-${x}`}\n            key={uuidv4()}\n          />\n        );\n      }\n      renderedBoard.push(<tr key={uuidv4()}>{newCol}</tr>);\n    }\n    return renderedBoard;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { nCols, nRows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number); //-> coord will be a string, then space delimited by -,\n    //then new array will be numbered version of row and column  '2-3'\n\n    function flipCells(y, x) {\n      // if this coord is actually on the board, flip it\n      if (x >= 0 && x < nCols && y >= 0 && y < nRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCells(y - 1, x); //top\n    flipCells(y, x - 1); //left\n    flipCells(y, x); //center\n    flipCells(y, x + 1); //right\n    flipCells(y + 1, x); //bottom\n\n    this.setState({ board: board });\n\n    // win when every cell is turned off\n    for (let y = 0; y < nRows; y++) {\n      for (let x = 0; x < nCols; x++) {\n        //if any of the columns have a truthy value in it, break out since game hasn't been won\n        if (board[y][x]) {\n          return;\n        }\n      }\n    }\n    this.setState({ hasWon: true });\n  }\n\n  /** Render game board or winning message. */\n  render() {\n    const renderedBoard = this.renderBoard();\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    return this.state.hasWon ? (\n      <h1 className=\"neon-orange\">NICE, YOU WON!</h1>\n    ) : (\n      <>\n        <h1>\n          <span className=\"neon-orange\">Lights</span>\n          <br />\n          <span className=\"neon-blue\">Out</span>\n        </h1>\n        <div id=\"Lights-out-container\">\n          <table>\n            <tbody>{renderedBoard}</tbody>\n          </table>\n        </div>\n      </>\n    );\n    // make table board\n    // TODO\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}